name: Build and test

on:
  schedule:
    - cron: '0 18 * * 5'
  push:
    branches:
        - main
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            build_type: release
            compiler: gcc
          - os: ubuntu-latest
            build_type: debug
            compiler: gcc
          - os: ubuntu-latest
            build_type: release
            compiler: clang
          - os: ubuntu-latest
            build_type: debug
            compiler: clang
          - os: macos-15
            build_type: release
            compiler: clang
          - os: macos-15
            build_type: debug
            compiler: clang
          - os: windows-latest
            build_type: release
            compiler: msvc
          - os: windows-latest
            build_type: debug
            compiler: msvc

    runs-on: ${{ matrix.os }}
    name: '${{ matrix.os }}: ${{ matrix.compiler }} + ${{ matrix.build_type }}'

    steps:
      - uses: actions/checkout@v5

      - name: Select CMake preset name
        shell: bash
        run: |
            CMAKE_PRESET_NAME=${{ matrix.compiler }}_${{ matrix.build_type }}
            echo "CMAKE_PRESET_NAME=$CMAKE_PRESET_NAME" >> "$GITHUB_ENV"

      - name: Install conan
        shell: bash
        run: |
           pipx install conan
           CONAN_PIP_VERSION=$(conan version --format=json | jq -r '.version' | tr . _)
           echo "CONAN_PIP_VERSION=$CONAN_PIP_VERSION" >> "$GITHUB_ENV"

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.conan_local_cache
          key: conan-${{ env.CONAN_PIP_VERSION }}-${{ matrix.os }}-${{ env.CMAKE_PRESET_NAME }}-${{ hashFiles('conanfile.py') }}

      - name: Configure environment for Windows
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure environment for MacOS
        if: matrix.os == 'macos-15'
        run: |
          echo "$(brew --prefix llvm@18)/bin" >> $GITHUB_PATH
          export PATH=$(brew --prefix llvm@18)/bin:$PATH
          export CC=$(brew --prefix llvm@18)/bin/clang
          export CXX=$(brew --prefix llvm@18)/bin/clang++

      - name: Get specific version CMake, v3.28.1
        uses: lukka/get-cmake@v3.28.1
        if: false

      - name: Configure CMake
        run: cmake -UCONAN_COMMAND --preset ${{ env.CMAKE_PRESET_NAME }}

      - name: Compile
        run: cmake --build --preset ${{ env.CMAKE_PRESET_NAME }}

      - name: Run tests
        run: ctest --preset ${{ env.CMAKE_PRESET_NAME }}

#------------------------------------------------------------------------------
# Build with coverage
#------------------------------------------------------------------------------
  coverage:
    needs: build
    name: Collect coverage on ubuntu-latest with gcc_debug
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Get specific version CMake, v3.28.1
        uses: lukka/get-cmake@v3.28.1
        if: false

      - name: Install lcov
        run: |
           sudo apt install -y lcov

      - name: Install conan
        shell: bash
        run: |
           pipx install conan
           CONAN_PIP_VERSION=$(conan version --format=json | jq -r '.version' | tr . _)
           echo "CONAN_PIP_VERSION=$CONAN_PIP_VERSION" >> "$GITHUB_ENV"

      - name: Cache Conan packages
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/.conan_local_cache
          key: conan-${{ env.CONAN_PIP_VERSION }}-ubuntu-latest-gcc_debug-${{ hashFiles('conanfile.py') }}

      - name: Configure CMake
        run: cmake -UCONAN_COMMAND -DMSWPR_ENABLE_COVERAGE=ON --preset gcc_debug

      - name: Compile
        run: cmake --build --preset gcc_debug

      - name: Run coverage task
        run: cmake --build --preset gcc_debug --target merge-coverage

      - name: Upload code coverage info
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./build/coverage_report_lcov/total.info
          flags: gcc_debug
          disable_search: true
          fail_ci_if_error: true
          plugins: noop
